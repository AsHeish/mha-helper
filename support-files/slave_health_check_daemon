#!/usr/bin/env python

# (c) 2013, Ovais Tariq <ovaistariq@gmail.com>
#
# This file is part of mha-helper
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import httplib
import BaseHTTPServer
import sys
import time
import socket
from optparse import OptionParser

sys.path.append("/usr/local/mha-helper/scripts/")
from lib.unix_daemon import Unix_daemon
from lib.mha_config_helper import MHA_global_config_helper
from lib.mha_slave_helper import MHA_slave_helper

# HTTP request handler that will handle requests coming in from 
# HAProxy slave health probes
class Slave_health_check_server(BaseHTTPServer.BaseHTTPRequestHandler):
    # HTTP response codes sent by the server
    HTTP_ERROR_CODE = 503
    HTTP_SUCCESS_CODE = 200

    def do_OPTIONS(self):
        self.do_GET()

    def do_GET(self):
        slave_hostname = self.headers.get('Slave_host')

        # Run the test to see if slave is healthy
        slave = MHA_slave_helper(slave_host=slave_hostname)
        return_code = slave.is_healthy()
        return_message = slave.get_return_code_string(return_code)

        if return_code == MHA_slave_helper.CODE_SUCCESS:
            response_code = Slave_health_check_server.HTTP_SUCCESS_CODE
        else:
            response_code = Slave_health_check_server.HTTP_ERROR_CODE

        # Send back the HTTP response
        try:
            self.send_response(response_code)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write(return_message)
        except socket.error:
            pass

    def do_QUIT(self):
        """send 200 OK response, and set server.stop to True"""
        self.send_response(200)
        self.end_headers()
        self.server.stop = True

    def finish(self, *args, **kw):
        try:
            if not self.wfile.closed:
                self.wfile.flush()
                self.wfile.close()
        except socket.error:
            pass

        self.rfile.close()

# Override the BaseHTTPServer so that the HTTP server can be 
# stopped on demand
class StoppableHttpServer(BaseHTTPServer.HTTPServer):
    """http server that reacts to self.stop flag"""

    def serve_forever (self):
        """Handle one request at a time until stopped."""
        self.stop = False
        while not self.stop:
            self.handle_request()


class Slave_health_check_daemon(Unix_daemon):
    def __init__(self):
        config_helper = MHA_global_config_helper(host=None)

        self._listen_port = config_helper.get_slave_check_listen_port()

        self._pidfile = config_helper.get_slave_check_daemon_pid()
        if self._pidfile == False:
            raise ValueError("Problems generating pid path")

        self._workdir = config_helper.get_slave_check_daemon_workdir()
        if self._workdir == False:
            raise ValueError("Error determining slave_check_server_workdir from config")

        self._log = config_helper.get_slave_check_daemon_log()
        if self._log == False:
            raise ValueError("Error determining slave_check_server_log from config")

        super(Slave_health_check_daemon, self).__init__(pidfile=self._pidfile, 
                stdout=self._log, stderr=self._log, home_dir=self._workdir)

    def run(self):
        while True:
            sleep_seconds = 1

            if self.is_server_running() == False:
                self.start_server()

            time.sleep(sleep_seconds)

    def stop(self):
        super(Slave_health_check_daemon, self).stop()
        self.stop_server()

    def status(self):
        if self.is_server_running() == False:
            print "slave_health_check stopped"
        else:
            print ("slave_health_check daemon listening on port %s" %
                    self._listen_port)
        
        return True

    def is_server_running(self):
        try:
            sock = socket.socket()
            sock.connect(('localhost', self._listen_port))
            sock.close()
            return True
        except:
            return False

    def start_server(self):
        server_class = StoppableHttpServer
        handler_class = Slave_health_check_server
        server_address = ('', self._listen_port)

        httpd = server_class(server_address, handler_class)

        print ("[INFO] Starting slave_health_check daemon, listening on port %s" % 
                self._listen_port)
        
        httpd.serve_forever()

        return True

    def stop_server(self):
        # Send QUIT command to HTTP server so that it stops gracefully
        print ("[INFO] Stopping slave_health_check daemon, listening on port %s" % 
                self._listen_port)

        if self.is_server_running() == False:
            return True

        conn = httplib.HTTPConnection("localhost", self._listen_port)
        conn.request("QUIT", "/")
        conn.getresponse()
        conn.close()

        print "[INFO] slave_health_check daemon stopped"
        return True

    def restart_server(self):
        self.start_server()
        self.stop_server()


def main():
    usage = "usage: %prog start|stop|restart|status"
    parser = OptionParser(usage)
    (options, args) = parser.parse_args()

    if len(args) == 1:
        try:
            slave_health_check_daemon = Slave_health_check_daemon()
        except ValueError as e:
            parser.error(str(e))
            sys.exit(3)

        if args[0] == "start":
            print "Starting daemon"
            slave_health_check_daemon.start()
        elif args[0] == "stop":
            print "Stopping daemon"
            slave_health_check_daemon.stop()
        elif args[0] == "restart":
            print "Restarting daemon"
            slave_health_check_daemon.restart()
        elif args[0] == "status":
            slave_health_check_daemon.status()
        else:
            parser.error("Unknown command")
            sys.exit(2)

        sys.exit(0)
    else:
        parser.error("Incorrect number of arguments")
        sys.exit(2)

if __name__ == "__main__":
    main()
